# import UserOrderByInput from './generated/prisma.graphql'
# import CategoryWhereUniqueInput from './generated/prisma.graphql'
# import CategoryWhereInput from './generated/prisma.graphql'
# import CategoryOrderByInput from './generated/prisma.graphql'
# import RecipeWhereUniqueInput from './generated/prisma.graphql'
# import RecipeWhereInput from './generated/prisma.graphql'
# import RecipeOrderByInput from './generated/prisma.graphql'
# import UserWhereUniqueInput from './generated/prisma.graphql'
# import FileWhereUniqueInput from './generated/prisma.graphql'
# import FileWhereInput from './generated/prisma.graphql'
# import FileOrderByInput from './generated/prisma.graphql'
# imoprt FileCreateInput from './generated/prisma.graphql'
# import FileUpdateInput from './generated/prisma.graphql'
# import FileCreateOneInput from './generated/prisma.graphql'
# import FileWhereInput from './generated/prisma.graphql'
# import BatchPayload from './generated/prisma.graphql'
# import TagCreateInput from './generated/prisma.graphql'
# import TagUpdateInput from './generated/prisma.graphql'
# import TagWhereUniqueInput from './generated/prisma.graphql'
# import TagWhereInput from './generated/prisma.graphql'
# import TagOrderByInput from './generated/prisma.graphql'
# import TagConnection from './generated/prisma.graphql'
# import Tag from './generated/prisma.graphql'
# import RecipeCreateInput from './generated/prisma.graphql'

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  user(where: UserWhereUniqueInput!): User
  me: User!
  tag(where: TagWhereUniqueInput!): Tag
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag]!
  category(where: CategoryWhereUniqueInput!): Category
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category]!
  tagsConnection(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): TagConnection!
  categoriesConnection(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CategoryConnection!
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Recipe]!
  recipesConnection(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): RecipeConnection!
  file(where: FileWhereUniqueInput!): File
  files(
    where: FileWhereInput
    orderBy: FileOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [File]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput!): AuthPayload!
  deleteUser(where: UserWhereUniqueInput!): User
  updateUser(data: UpdateUserInput!): User!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  deleteTag(where: TagWhereInput!): Tag!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category
  upsertCategory(
    where: CategoryWhereUniqueInput!
    create: CategoryCreateInput!
    update: CategoryUpdateInput!
  ): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  createRecipe(data: RecipeCreateInput!): Recipe!
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateManyRecipes(
    data: RecipeUpdateManyMutationInput!
    where: RecipeWhereInput
  ): BatchPayload!
  upsertRecipe(
    where: RecipeWhereUniqueInput!
    create: RecipeCreateInput!
    update: RecipeUpdateInput!
  ): Recipe!
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File
  updateImage(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  deleteImage(where: FileWhereUniqueInput!): File
  uploadImage(file: Upload!): File!
  renameImage(id: ID!, name: String!): File
  deleteManyImages(where: FileWhereInput!): BatchPayload!
}

# type Subscription {

# }

type Category {
  id: ID!
  name: String!
  recipes(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Recipe!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

type Recipe {
  id: ID!
  title: String!
  handle: String!
  description: String
  ingredients: [String!]!
  directions: String
  categories(
    where: CategoryWhereInput
    orderBy: CategoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Category!]
  tags: [String!]!
  image: File
  author: User!
}

type RecipeConnection {
  pageInfo: PageInfo!
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  updatedAt: String!
  createdAt: String!
  recipes(
    where: RecipeWhereInput
    orderBy: RecipeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Recipe!]
}
scalar Upload

input RecipeCreateingredientsInput {
  set: [String!]
}

input CategoryCreateManyWithoutRecipesInput {
  create: [CategoryCreateWithoutRecipesInput!]
  connect: [CategoryWhereUniqueInput!]
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
